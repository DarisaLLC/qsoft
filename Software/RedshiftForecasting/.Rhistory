test = c(0,1,2)
test2 = c(3,4,5)
cbind(test,test2)
test3=c()
cbind(test3,test)
foresttest$predprob[1,]
foresttest$predprob
source("grb_class.R")
test3
test3 = c()
NULL
source("grb_class.R")
seq(1,2,1)
for i in seq(1,2,1) { 2 }
source("grb_class.R")
forest_res
foresttest$predprob
foresttest$predprob[,0]
foresttest$predprob[,1]
source("grb_class.R")
forest_res
z
data1$z
data1$Z
data1$ZZ
Z
source("grb_class.R")
write(forest_res,"weight_data.txt",sep=" ")
source("grb_class.R")
parcoord(forest_order)
forest_order
order(foresttest$predprob[,1])
forest_order
forest_res
foresttest$predprob[,1]
cbind(foresttest$predprob[,1],order(foresttest$predprob[,1]))
seq(1,10,1)
forest_ord
source("grb_class.R")
forest_order
parcoord(forest_order)
color_vec = "blue"*(data1$class == "low") + "red"*(data1$class == "high")
for(i in seq(1,len(color_vec))) {#
	if(data1$class == "high") { color_vec[i] = "red"}#
	else { color_vec[i] = "blue"}#
}
length(Z)
for(i in seq(1,length(data1$class))) {#
	if(data1$class == "high") { color_vec[i] = "red"}#
	else { color_vec[i] = "blue"}#
}
for(i in seq(1,length(data1$class))) {#
	if(data1$class[i] == "high") { color_vec[i] = "red"}#
	else { color_vec[i] = "blue"}#
}
test = array("test",dim=c(151))
test
color_vec = array("",dim=length(data1$class))#
for(i in seq(1,length(data1$class))) {#
	if(data1$class[i] == "high") { color_vec[i] = "red"}#
	else { color_vec[i] = "blue"}#
}
color_vec
parcoord(forest_order,color_vec)
sum(weights_vec)
weights_vec / sum(weights_vec)
source("grb_class.R")
color_vec = array("",dim=length(data1$class))#
for(i in seq(1,length(data1$class))) {#
	if(data1$class[i] == "high") { color_vec[i] = "red"}#
	else { color_vec[i] = "blue"}#
}#
parcoord(forest_order,color_vec)
write(cbind(Z,forest_res),"weight_data.txt")
write(forest_res,"forest_probs_pred.txt")#
postscript(file="forest_probs_pred_bumps.eps",width=4,height=4)#
parcoord(forest_order,color_vec)#
dev.off()
write(forest_res,"forest_probs_pred.txt")#
postscript(file="forest_probs_pred_bumps.eps",width=10,height=10)#
parcoord(forest_order,color_vec)#
dev.off()
source("grb_class.R")
source("grb_class.R")
print(seq(1,101,10))
source("grb_class.R")
source("grb_class.R")
source("grb_class.R")
source("grb_class.R")
parcoord(forest_order,color_vec,xlab=weights_try)
xlab=weights_try
parcoord(forest_order,color_vec)
xlab=weights_try
length(weights_vec)
source("grb_class.R")
source("grb_class.R")
source("grb_class.R")
parcoord(forest_order,color_vec)#
#
# write output#
write(forest_res,"forest_probs_pred.txt")#
postscript(file="forest_probs_pred_bumps.eps",width=10,height=10)#
parcoord(forest_order,color_vec)#
dev.off()
names
features
features$names
names(features)
features$uvot_detection
source("grb_class.R")
source("grb_class.R")
source("grb_class.R")
source("grb_class.R")
source("grb_class.R")
# Do bumps plot#
color_vec = array("",dim=length(data1$class))#
lwd_vec = array(1,dim=length(data1$class))#
for(i in seq(1,length(data1$class))) {#
	if(data1$class[i] == "high") {#
			color_vec[i] = "red"#
			lwd_vec[i] = 2#
	} else {#
			color_vec[i] = "blue"#
	}#
}#
# plot here---as well as in eps file below#
parcoord(forest_order,color_vec)#
#
# write output#
write(forest_res,"forest_probs_pred.txt") # write forest_res vector to text file#
postscript(file="forest_probs_pred_bumps.eps",width=10,height=10) # save bumps plot#
parcoord(forest_order,color_vec)#
dev.off()
lwd_vec
#
# plot here---as well as in eps file below#
parcoord(forest_order,color_vec,lwd=lwd_vec)
Z
features
names(features)
source("grb_class.R")
forest_res
parcoord(forest_res,color_vec)
parcoord(forest_res,color_vec)
source("grb_class.R")
source("grb_class.R")
#
parcoord(forest_res,color_vec,lwd=lwd_vec,var.label=TRUE)
#
parcoord(forest_res,color_vec,lwd=lwd_vec,var.label=TRUE)
#
# write output#
write(forest_res,"forest_probs_pred.txt") # write forest_res vector to text file#
postscript(file="forest_probs_pred_bumps.eps",width=10,height=10) # save bumps plot#
parcoord(forest_res,color_vec,lwd=lwd_vec,var.label=TRUE)#
dev.off()
source('grb_class.R')
extract_stats()
fres=extract_stats()
make_bumps_plot(fres)
library(parcoord)
