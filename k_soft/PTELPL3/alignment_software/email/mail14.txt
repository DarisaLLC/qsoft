                                                                                                                                                                                                                                                               
Delivered-To: edward.rosten@gmail.com
Received: by 10.86.86.4 with SMTP id j4cs164948fgb;
        Mon, 6 Apr 2009 17:28:27 -0700 (PDT)
MIME-Version: 1.0
Sender: amiller.astro@gmail.com
Received: by 10.220.97.146 with SMTP id l18mr4781526vcn.77.1239064106640; Mon, 
	06 Apr 2009 17:28:26 -0700 (PDT)
In-Reply-To: <fe4695ab0904060549w4a04ff6bo51edd2978805df5c@mail.gmail.com>
References: <fe4695ab0805291418w399fccc7xc28f4f12ab986661@mail.gmail.com>
	 <Pine.LNX.4.64.0901221607180.5731@glob>
	 <fe4695ab0901222155n6f57ad17h189da6d46aff2578@mail.gmail.com>
	 <Pine.LNX.4.64.0901222325430.7531@glob>
	 <fe4695ab0901271034n3d77c445u26a82e8620fcf461@mail.gmail.com>
	 <Pine.LNX.4.64.0901271338450.17737@glob>
	 <fe4695ab0902030730q5fbe1c2amc4fb2ef8a8eb2d7b@mail.gmail.com>
	 <Pine.LNX.4.64.0902031642470.13884@glob>
	 <fe4695ab0903060811m77f3b6e0o9ad7d3494a72cb03@mail.gmail.com>
	 <fe4695ab0904060549w4a04ff6bo51edd2978805df5c@mail.gmail.com>
Date: Mon, 6 Apr 2009 17:28:26 -0700
X-Google-Sender-Auth: 397f31d5af944950
Message-ID: <57a872ec0904061728p1c739f2crff9c68ded3e852cd@mail.gmail.com>
Subject: Re: Ping
From: Adam Miller <amiller@astro.berkeley.edu>
To: Edward Rosten <edward.rosten@gmail.com>
Content-Type: multipart/alternative; boundary=0016e6471696ee27290466ec17cc

--0016e6471696ee27290466ec17cc
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

Hi Ed,

I too have been thinking about this, and it would be great to get it out as
a paper. Here are some thoughts:


> The short answer is that all we do in the pipeline is median subtract the
> > average number of sky counts in all frames taken within ~5 min of the
> > current science frame. The reason for this is that the sky background
> > varies on roughly 5 min intervals in the NIR. The signal-to-noise of the
> > sources is still limited by the variance in the sky, even after this
> > subtraction, so the method I describe below should still work just fine.
>
> How many frames per minute are there? Would a suitable simulation have
> no variation in the average, but still use the correct number of
> frames for the median?


At the moment, it seems to me that we're focusing on NIR imaging, so a
typical exposure would be ~30 sec for an individual frame, with enough
frames to fill 30-60 min of observations. A realistic simulation would have
an average sky value that changes frame to frame, but the changes should be
slowly varying as a function of time. So, the first and last frame could be
quite different, but any back-to-back frames should be virtually identical.


> That being said, if you wanted to get closer to the "real" thing, we could
> > use the empircal fits to the sky background that Dan Starr's code
> produces
> > and we could just kinda bootstrap off of that. This will be closer to
> what
> > the actual images look like, but it won't differ much in the end I'm
> > guessing.
>
> What does the empirical fit fit
>

The empirical fits from Dan's code are simply fitting a spline to the median
pixel value in each frame. Then rather than subtracting the actual median
from a frame, the value from the spline is subtracted.

>
> > Anyway, I can probably create these "fake" images for you, but I'm pretty
> > busy at the moment preparing for my prelim exam. The exam itself is
> toward
> > the end of the month. At that time I could think (and act) some more
> > towards creating these fake images. In the meantime - I could quite
> easily
> > provide you with several real images if you have any desire to test your
> > code on them.
>
> OK. I've been pertty busy recently too, but I think we can both start
> to move on this again.
>
> So what's the procedure?
>
> Something like generate Poisson noise at each pixel with a specified
> mean (which is?).
> Add on a starfield, with some shift (model the stars as Gaussian to
> start with with some intensity each: what should the distribution of
> intensities be and should there be more noise added).
>

A typical detector may go non-linear at 200000 counts. This would mean that
we'd typically aim for around 100000 counts in the actual image. So as a
first attempt a mean of 100000 counts for the background would be
appropriate. Each pixel should then also have Poisson noise.

Gaussian stars should be fine, and you'd probably want to choose a size such
that the FWHM of the gaussians ~3-4 pixels. There should then be additional
poisson noise from these sources as well.

There is also dark current and bias effects that add to the noise, however,
in modern detectors these are effectively negligable and so I'd advise that
for now we just ignore them.

As for the intensities we could pick almost any distribution, as that is
essentially what we could find in nature if we looked hard enough. But, I
think the case of most interest, and the one most likely to generate
interest in this method/paper, is the case where none of the stars are
clearly detected in the individual frames. For instance, maybe there is 10
stars in the field that will all be easily seen after 1 hours worth of
imaging, but which don't show up at all in the 30 sec exposures. So S/N ~ 1
in the individual frames. If there are a few stars like that, and your code
is capable of reconstructing mosaics in that situation then it becomes
something that is very very interesting (as we have no other good techniques
to do this at the moment).


>
> Repeat this for N images.
>

Yes.


>
> For each pixel, for each image, remove the background by  by
> subtracting the median value of that pixel the surrounding M images.


Actually from each image, you determine the median of that image (with some
form of sigma clipping to reject values from stars), and subtract that
median from every pixel in the given image.

>
> At this point, the images should be ready for my algorithm.


Yep, you should be able to rock and roll at this point.

Does this all make sense? If not let me know. I'd be curious to know how
well the code does at reconstructing images as we continue to decrease the
S/N and decrease the number of stars. There is also, of course, loads of
real data that we can test this on, but the "fake" situation outlined above
is probably the most challenging and therefore the most interesting.

wib

Adam

--0016e6471696ee27290466ec17cc
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Hi Ed,<br><br>I too have been thinking about this, and it would be great to=
 get it out as a paper. Here are some thoughts:<br><br><div class=3D"gmail_=
quote"><br><blockquote class=3D"gmail_quote" style=3D"border-left: 1px soli=
d rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">

&gt; The short answer is that all we do in the pipeline is median subtract =
the<br>
&gt; average number of sky counts in all frames taken within ~5 min of the<=
br>
&gt; current science frame. The reason for this is that the sky background<=
br>
&gt; varies on roughly 5 min intervals in the NIR. The signal-to-noise of t=
he<br>
&gt; sources is still limited by the variance in the sky, even after this<b=
r>
&gt; subtraction, so the method I describe below should still work just fin=
e.<br>
<br>
How many frames per minute are there? Would a suitable simulation have<br>
no variation in the average, but still use the correct number of<br>
frames for the median?</blockquote><div><br>At the moment, it seems to me t=
hat we&#39;re focusing on NIR imaging, so a typical exposure would be ~30 s=
ec for an individual frame, with enough frames to fill 30-60 min of observa=
tions. A realistic simulation would have an average sky value that changes =
frame to frame, but the changes should be slowly varying as a function of t=
ime. So, the first and last frame could be quite different, but any back-to=
-back frames should be virtually identical.=A0 <br>
<br></div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid=
 rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; Th=
at being said, if you wanted to get closer to the &quot;real&quot; thing, w=
e could<br>

&gt; use the empircal fits to the sky background that Dan Starr&#39;s code =
produces<br>
&gt; and we could just kinda bootstrap off of that. This will be closer to =
what<br>
&gt; the actual images look like, but it won&#39;t differ much in the end I=
&#39;m<br>
&gt; guessing.<br>
<br>
What does the empirical fit fit<br>
</blockquote><div><br>The empirical fits from Dan&#39;s code are simply fit=
ting a spline to the median pixel value in each frame. Then rather than sub=
tracting the actual median from a frame, the value from the spline is subtr=
acted.<br>
</div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid rgb=
(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
&gt; Anyway, I can probably create these &quot;fake&quot; images for you, b=
ut I&#39;m pretty<br>
&gt; busy at the moment preparing for my prelim exam. The exam itself is to=
ward<br>
&gt; the end of the month. At that time I could think (and act) some more<b=
r>
&gt; towards creating these fake images. In the meantime - I could quite ea=
sily<br>
&gt; provide you with several real images if you have any desire to test yo=
ur<br>
&gt; code on them.<br>
<br>
OK. I&#39;ve been pertty busy recently too, but I think we can both start<b=
r>
to move on this again.<br>
<br>
So what&#39;s the procedure?<br>
<br>
Something like generate Poisson noise at each pixel with a specified<br>
mean (which is?).<br>
Add on a starfield, with some shift (model the stars as Gaussian to<br>
start with with some intensity each: what should the distribution of<br>
intensities be and should there be more noise added).<br>
</blockquote><div><br>A typical detector may go non-linear at 200000 counts=
. This would mean that we&#39;d typically aim for around 100000 counts in t=
he actual image. So as a first attempt a mean of 100000 counts for the back=
ground would be appropriate. Each pixel should then also have Poisson noise=
. <br>
<br>Gaussian stars should be fine, and you&#39;d probably want to choose a =
size such that the FWHM of the gaussians ~3-4 pixels. There should then be =
additional poisson noise from these sources as well. <br><br>There is also =
dark current and bias effects that add to the noise, however, in modern det=
ectors these are effectively negligable and so I&#39;d advise that for now =
we just ignore them. <br>
<br>As for the intensities we could pick almost any distribution, as that i=
s essentially what we could find in nature if we looked hard enough. But, I=
 think the case of most interest, and the one most likely to generate inter=
est in this method/paper, is the case where none of the stars are clearly d=
etected in the individual frames. For instance, maybe there is 10 stars in =
the field that will all be easily seen after 1 hours worth of imaging, but =
which don&#39;t show up at all in the 30 sec exposures. So S/N ~ 1 in the i=
ndividual frames. If there are a few stars like that, and your code is capa=
ble of reconstructing mosaics in that situation then it becomes something t=
hat is very very interesting (as we have no other good techniques to do thi=
s at the moment).<br>
=A0</div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid =
rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
Repeat this for N images.<br>
</blockquote><div><br>Yes.<br>=A0</div><blockquote class=3D"gmail_quote" st=
yle=3D"border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex=
; padding-left: 1ex;"><br>
For each pixel, for each image, remove the background by =A0by<br>
subtracting the median value of that pixel the surrounding M images.</block=
quote><div><br>Actually from each image, you determine the median of that i=
mage (with some form of sigma clipping to reject values from stars), and su=
btract that median from every pixel in the given image.<br>
</div><blockquote class=3D"gmail_quote" style=3D"border-left: 1px solid rgb=
(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;"><br>
At this point, the images should be ready for my algorithm.</blockquote><di=
v><br>Yep, you should be able to rock and roll at this point.<br><br>Does t=
his all make sense? If not let me know. I&#39;d be curious to know how well=
 the code does at reconstructing images as we continue to decrease the S/N =
and decrease the number of stars. There is also, of course, loads of real d=
ata that we can test this on, but the &quot;fake&quot; situation outlined a=
bove is probably the most challenging and therefore the most interesting.<b=
r>
<br>wib<br><br>Adam <br></div></div><br>

--0016e6471696ee27290466ec17cc--